const mongoose = require('mongoose');
const { MONGODB_CONFIG } = require('./database-config');

async function clearAndCreateRealData() {
  try {
    console.log('üöÄ Clearing all test data and creating real data...');
    
    await mongoose.connect(MONGODB_CONFIG.uri, MONGODB_CONFIG.options);
    console.log('‚úÖ Connected to MongoDB');
    
    const db = mongoose.connection;
    
    // Clear all collections
    console.log('üßπ Clearing all test data...');
    const collections = ['packages', 'washingplaces', 'washes', 'payments', 'feedbacks', 'cars', 'notifications', 'referrals', 'userpackages'];
    
    for (const collectionName of collections) {
      try {
        const collection = db.db.collection(collectionName);
        const result = await collection.deleteMany({});
        console.log(`‚úÖ Cleared ${result.deletedCount} documents from ${collectionName}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  Could not clear ${collectionName}: ${error.message}`);
      }
    }
    
    console.log('‚úÖ All test data cleared!');
    
    // Create Real Washing Places in Riyadh
    console.log('\nüè¢ Creating real washing places in Riyadh...');
    const washingPlacesCollection = db.db.collection('washingplaces');
    
    const washingPlaces = [
      {
        name: 'ŸÖÿ∫ÿ≥ŸÑÿ© ÿßŸÑÿ±Ÿäÿßÿ∂ ÿßŸÑÿ£ŸàŸÑŸâ',
        address: 'ÿßŸÑÿ±Ÿäÿßÿ∂ÿå ÿ¥ÿßÿ±ÿπ ÿßŸÑŸÖŸÑŸÉ ŸÅŸáÿØÿå ÿ≠Ÿä ÿßŸÑŸÜÿ≤Ÿáÿ©',
        phone: '+966501234567',
        hours: '24/7',
        email: 'branch1@paypass.com',
        location: 'Point',
        city: 'ÿßŸÑÿ±Ÿäÿßÿ∂',
        rating: 4.5,
        customers: 150,
        status: 'active',
        activeOrders: 8,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'ŸÖÿ∫ÿ≥ŸÑÿ© ÿßŸÑÿ±Ÿäÿßÿ∂ ÿßŸÑÿ´ÿßŸÜŸäÿ©',
        address: 'ÿßŸÑÿ±Ÿäÿßÿ∂ÿå ÿ¥ÿßÿ±ÿπ ÿßŸÑÿ™ÿ≠ŸÑŸäÿ©ÿå ÿ≠Ÿä ÿßŸÑÿ≥ŸÑŸäŸÖÿßŸÜŸäÿ©',
        phone: '+966501234568',
        hours: '24/7',
        email: 'branch2@paypass.com',
        location: 'Point',
        city: 'ÿßŸÑÿ±Ÿäÿßÿ∂',
        rating: 4.3,
        customers: 120,
        status: 'active',
        activeOrders: 6,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'ŸÖÿ∫ÿ≥ŸÑÿ© ÿßŸÑÿ±Ÿäÿßÿ∂ ÿßŸÑÿ´ÿßŸÑÿ´ÿ©',
        address: 'ÿßŸÑÿ±Ÿäÿßÿ∂ÿå ÿ¥ÿßÿ±ÿπ ÿßŸÑÿπŸÑŸäÿßÿå ÿ≠Ÿä ÿßŸÑÿπŸÑŸäÿß',
        phone: '+966501234569',
        hours: '24/7',
        email: 'branch3@paypass.com',
        location: 'Point',
        city: 'ÿßŸÑÿ±Ÿäÿßÿ∂',
        rating: 4.7,
        customers: 180,
        status: 'active',
        activeOrders: 12,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'ŸÖÿ∫ÿ≥ŸÑÿ© ÿßŸÑÿ±Ÿäÿßÿ∂ ÿßŸÑÿ±ÿßÿ®ÿπÿ©',
        address: 'ÿßŸÑÿ±Ÿäÿßÿ∂ÿå ÿ¥ÿßÿ±ÿπ ÿßŸÑŸÖŸÑŸÉ ÿπÿ®ÿØÿßŸÑŸÑŸáÿå ÿ≠Ÿä ÿßŸÑŸÖŸÑŸÇÿß',
        phone: '+966501234570',
        hours: '24/7',
        email: 'branch4@paypass.com',
        location: 'Point',
        city: 'ÿßŸÑÿ±Ÿäÿßÿ∂',
        rating: 4.4,
        customers: 140,
        status: 'active',
        activeOrders: 9,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];
    
    await washingPlacesCollection.insertMany(washingPlaces);
    console.log('‚úÖ Real washing places created!');
    
    // Create Real Packages
    console.log('\nüì¶ Creating real packages...');
    const packagesCollection = db.db.collection('packages');
    
    const packages = [
      {
        name: 'ÿßŸÑÿ®ÿßŸÇÿ© ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©',
        description: 'ÿ∫ÿ≥ŸäŸÑ ÿÆÿßÿ±ÿ¨Ÿä ÿ¥ÿßŸÖŸÑ ŸÑŸÑÿ≥Ÿäÿßÿ±ÿ© ŸÖÿπ ÿ™ÿ¨ŸÅŸäŸÅ Ÿàÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑÿ≤ÿ¨ÿßÿ¨',
        price: 50,
        duration: 30,
        status: 'active',
        basePrice: 50,
        originalPrice: 70,
        features: ['ÿ∫ÿ≥ŸäŸÑ ÿÆÿßÿ±ÿ¨Ÿä', 'ÿ™ÿ¨ŸÅŸäŸÅ', 'ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑÿ≤ÿ¨ÿßÿ¨'],
        popular: false,
        washes: 1,
        savings: 20,
        size: 'small',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'ÿßŸÑÿ®ÿßŸÇÿ© ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ©',
        description: 'ÿ∫ÿ≥ŸäŸÑ ÿ¥ÿßŸÖŸÑ ŸÑŸÑÿ≥Ÿäÿßÿ±ÿ© ŸÖŸÜ ÿßŸÑÿØÿßÿÆŸÑ ŸàÿßŸÑÿÆÿßÿ±ÿ¨ ŸÖÿπ ŸÖÿπÿ∑ÿ±',
        price: 80,
        duration: 45,
        status: 'active',
        basePrice: 80,
        originalPrice: 110,
        features: ['ÿ∫ÿ≥ŸäŸÑ ÿÆÿßÿ±ÿ¨Ÿä', 'ÿ∫ÿ≥ŸäŸÑ ÿØÿßÿÆŸÑŸä', 'ÿ™ÿ¨ŸÅŸäŸÅ', 'ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑÿ≤ÿ¨ÿßÿ¨', 'ŸÖÿπÿ∑ÿ±'],
        popular: true,
        washes: 1,
        savings: 30,
        size: 'medium',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'ÿßŸÑÿ®ÿßŸÇÿ© ÿßŸÑÿ¥ÿßŸÖŸÑÿ©',
        description: 'ÿ∫ÿ≥ŸäŸÑ ÿ¥ÿßŸÖŸÑ ŸÖÿπ ÿ™ŸÑŸÖŸäÿπ Ÿàÿ•ŸÉÿ≥ÿ≥Ÿàÿßÿ±ÿßÿ™',
        price: 120,
        duration: 60,
        status: 'active',
        basePrice: 120,
        originalPrice: 160,
        features: ['ÿ∫ÿ≥ŸäŸÑ ÿÆÿßÿ±ÿ¨Ÿä', 'ÿ∫ÿ≥ŸäŸÑ ÿØÿßÿÆŸÑŸä', 'ÿ™ÿ¨ŸÅŸäŸÅ', 'ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑÿ≤ÿ¨ÿßÿ¨', 'ŸÖÿπÿ∑ÿ±', 'ÿ™ŸÑŸÖŸäÿπ'],
        popular: false,
        washes: 1,
        savings: 40,
        size: 'large',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];
    
    await packagesCollection.insertMany(packages);
    console.log('‚úÖ Real packages created!');
    
    console.log('\nüéâ REAL DATA CREATED SUCCESSFULLY!');
    console.log('üìä Summary:');
    console.log('   - 4 Washing Places in Riyadh');
    console.log('   - 3 Real Packages (ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©ÿå ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ©ÿå ÿßŸÑÿ¥ÿßŸÖŸÑÿ©)');
    console.log('');
    console.log('üì¶ PACKAGES:');
    console.log('='.repeat(50));
    
    packages.forEach((pkg, index) => {
      console.log(`${index + 1}. ${pkg.name}`);
      console.log(`   Price: ${pkg.price} SAR`);
      console.log(`   Original Price: ${pkg.originalPrice} SAR`);
      console.log(`   Savings: ${pkg.savings} SAR`);
      console.log(`   Duration: ${pkg.duration} minutes`);
      console.log(`   Features: ${pkg.features.join(', ')}`);
      console.log('');
    });
    
    console.log('üè¢ WASHING PLACES:');
    console.log('='.repeat(50));
    
    washingPlaces.forEach((branch, index) => {
      console.log(`${index + 1}. ${branch.name}`);
      console.log(`   Address: ${branch.address}`);
      console.log(`   Phone: ${branch.phone}`);
      console.log(`   Rating: ${branch.rating}/5`);
      console.log(`   Active Orders: ${branch.activeOrders}`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('üõë Disconnected from MongoDB');
  }
}

clearAndCreateRealData(); 