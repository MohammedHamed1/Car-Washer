const mongoose = require('mongoose');
const { MONGODB_CONFIG } = require('./database-config');

async function createSampleCars() {
  try {
    console.log('๐ Creating Sample Cars (Size Only)...');
    
    await mongoose.connect(MONGODB_CONFIG.uri, MONGODB_CONFIG.options);
    console.log('โ Connected to MongoDB');
    
    const db = mongoose.connection;
    
    // Clear existing cars
    console.log('๐งน Clearing existing cars...');
    const carsCollection = db.db.collection('cars');
    await carsCollection.deleteMany({});
    console.log('โ Existing cars cleared');
    
    // Sample cars data (size only)
    const sampleCars = [
      {
        size: 'small',
        isActive: true,
        totalWashes: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        size: 'medium',
        isActive: true,
        totalWashes: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        size: 'large',
        isActive: true,
        totalWashes: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];
    
    await carsCollection.insertMany(sampleCars);
    console.log('โ Sample cars created!');
    
    console.log('\n๐ SAMPLE CARS CREATED (SIZE ONLY):');
    console.log('='.repeat(50));
    
    const sizeNames = {
      small: 'ุตุบูุฑุฉ',
      medium: 'ูุชูุณุทุฉ',
      large: 'ูุจูุฑุฉ'
    };
    
    sampleCars.forEach((car, index) => {
      console.log(`${index + 1}. ุณูุงุฑุฉ ${sizeNames[car.size]}`);
      console.log(`   ุงูุญุฌู: ${car.size} (${sizeNames[car.size]})`);
      console.log(`   ูุดุทุฉ: ${car.isActive ? 'ูุนู' : 'ูุง'}`);
      console.log(`   ุนุฏุฏ ุงูุบุณูุงุช: ${car.totalWashes}`);
      console.log('');
    });
    
    console.log('๐ ููุฎุต ุงูุฃุญุฌุงู:');
    console.log('='.repeat(50));
    console.log('๐ ุตุบูุฑุฉ (small): ุณูุงุฑุงุช ุตุบูุฑุฉ ูุซู ุงูุณูุฏุงู ูุงููุงุชุดุจุงู');
    console.log('๐ ูุชูุณุทุฉ (medium): ุณูุงุฑุงุช ูุชูุณุทุฉ ูุซู SUV ูุงููุฑูุณ ุฃููุฑ');
    console.log('๐ ูุจูุฑุฉ (large): ุณูุงุฑุงุช ูุจูุฑุฉ ูุซู ุงูุดุงุญูุงุช ูุงููุงูุงุช');
    console.log('');
    
    console.log('๐ฐ ุงูุฃุณุนุงุฑ ุญุณุจ ุงูุญุฌู:');
    console.log('='.repeat(50));
    console.log('๐ฆ ุงูุจุงูุฉ ุงูุฃุณุงุณูุฉ:');
    console.log('   - ุตุบูุฑุฉ: 150 ุฑูุงู');
    console.log('   - ูุชูุณุทุฉ: 200 ุฑูุงู');
    console.log('   - ูุจูุฑุฉ: 250 ุฑูุงู');
    console.log('');
    console.log('๐ฆ ุงูุจุงูุฉ ุงููุชูุฏูุฉ:');
    console.log('   - ุตุบูุฑุฉ: 280 ุฑูุงู');
    console.log('   - ูุชูุณุทุฉ: 350 ุฑูุงู');
    console.log('   - ูุจูุฑุฉ: 420 ุฑูุงู');
    console.log('');
    console.log('๐ฆ ุงูุจุงูุฉ ุงูุดุงููุฉ:');
    console.log('   - ุตุบูุฑุฉ: 490 ุฑูุงู');
    console.log('   - ูุชูุณุทุฉ: 600 ุฑูุงู');
    console.log('   - ูุจูุฑุฉ: 770 ุฑูุงู');
    console.log('');
    console.log('๐ ุจุงูุฉ VIP (ูู ุงูููุงุฏู ููุท):');
    console.log('   - ุฌููุน ุงูุฃุญุฌุงู: 150 ุฑูุงู ุซุงุจุช');
    console.log('');
    
    console.log('๐ ุชู ุฅูุดุงุก ุงูุณูุงุฑุงุช ุงูุชุฌุฑูุจูุฉ ุจูุฌุงุญ!');
    
  } catch (error) {
    console.error('โ Error creating sample cars:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('๐ Disconnected from MongoDB');
  }
}

// Run the function
if (require.main === module) {
  createSampleCars();
}

module.exports = { createSampleCars }; 